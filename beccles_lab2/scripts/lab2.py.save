#!/usr/bin/env python

import rospy, tf
from kobuki_msgs.msg import BumperEvent
from geometry_msgs.msg import Twist
from nav_Msgs import Odometry
# Add additional imports for each of the message types used






#This function sequentially calls methods to perform a trajectory.
def executeTrajectory():
    pass  # Delete this 'pass' once implemented






#This function accepts two wheel velocities and a time interval.
def spinWheels(u1, u2, time):
	global teleop_pub
	u = (u1+u2)/2
	omega = (u1-u2)/0.2286
	twist_msg.linear.x = u
	twist_msg.linear.y = 0
	twist_msg.linear.z = 0
	twist_msg.angular.x = omega
	twist_msg.angular.y = 0
	twist_msg.angular.z = 0
	teleop_pub.publish(twist_msg)


#This function accepts a speed and a distance for the robot to move in a straight line
def driveStraight(speed, distance):
    accel = 0.1 #Acceleration in m/s^2
    


    
#Accepts an angle and makes the robot rotate around it.
def rotate(angle):
    pass  # Delete this 'pass' once implemented



#This function works the same as rotate how ever it does not publish linear velocities.
def driveArc(radius, speed, angle):
    pass  # Delete this 'pass' once implemented





#Odometry Callback function.
def read_odometry(msg):
  global deltaU
  global deltaV
  global delta


#Bumper Event Callback function
def readBumper(msg):
    if (msg.state == 1):
	driveStraight(0.25, 1)        



# (Optional) If you need something to happen repeatedly at a fixed interval, write the code here.
# Start the timer with the following line of code: 
#   rospy.Timer(rospy.Duration(.01), timerCallback)
def timerCallback(event):
    pass # Delete this 'pass' once imp








# This is the program's main function
if __name__ == '__main__':
    # Change this node name to include your username
    rospy.init_node('sample_Lab_2_node')


    # These are global variables. Write "global <variable_name>" in any other function
    #  to gain access to these global variables
    global teleop_pub
    global pose
    global odom_tf
    global odom_list

    # Replace the elipses '...' in the following lines to set up the publishers and subscribers the lab requires
    teleop_pub = rospy.Publisher('/cmd_vel_mux/input/teleop', Twist) # Publisher for commanding robot motion
    odom_sub = rospy.Subscriber('/odom', Odometry, read_odometry, queue_size=1) # Callback function to read in robot Odometry messages
    bumper_sub = rospy.Subscriber('...', BumperEvent, readBumper, queue_size=1) # Callback function to handle bumper events

    # Use this object to get the robot's Odometry 
    odom_list = tf.TransformListener()
    
    # Use this command to make the program wait for some seconds
    rospy.sleep(rospy.Duration(1, 0))



    print "Starting Lab 2"

    # Make the robot do stuff...

    print "Lab 2 complete!"
